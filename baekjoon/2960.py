# 에라토스테네스의 체


# 2960번
# 에라토스테네스의 체는 N보다 작거나 같은 모든 소수를 찾는 유명한 알고리즘이다.

# 이 알고리즘은 다음과 같다.

# 1. 2부터 N까지 모든 정수를 적는다.
# 2. 아직 지우지 않은 수 중 가장 작은 수를 찾는다. 이것을 P라고 하고, 이 수는 소수이다.
# 3. P를 지우고, 아직 지우지 않은 P의 배수를 크기 순서대로 지운다.
# 4. 아직 모든 수를 지우지 않았다면, 다시 2번 단계로 간다.
# N, K가 주어졌을 때, K번째 지우는 수를 구하는 프로그램을 작성하시오.

# 입력은 첫째 줄에 N과 K가 주어짐
# 출력은 첫째 줄에 K번째 지워진 수를 출력

# 예제 입력 1
# 7 3
# 예제 출력 1
# 6



# 데이터 입력 2개의 숫자를 받는 다는 것을 제시
int1, int2 = list(map(int, input().split(' ')))

# 에라토스테네스의 체는 소수를 확인하여 소수의 배수를 제거, 다음 소수를 확인하는 형태로 이어짐
# 에라토스테네스의 체를 이용하지만 소수만 출력하는 것이 아닌 소수 배수를 제거하는 과정을 활용
# int2번째로 제거되는 수를 찾아 제시하기 위함

def Eratosthenes(x, y):
    # y로 종료하고자 숫자 세기 위함
    count = 0
    # 숫자가 지워졌는지 체크하는 리스트 틀로 우선 False 형태(남아 있는 상태)
    # 숫자가 지워진다면 True 로 체크, 소수 자신이거나 해당 배수를 의미함
    case_check = [False]*(x+1)

    # 2부터 시작하는 2~int1값 반복
    for i in range(2, x+1):
        # 만약 체크할 때 False라면 아래 부분 실행
        if not case_check[i]:
            # 소수 및 배수 제거 반복되는 구조
            for j in range(i, x+1, i):
                # 만약 체크할 때 False라면 아래 부분 실행
                if not case_check[j]:
                    # 이놈은 True입니다 -> 소수 자신이거나 배수거나
                    case_check[j] = True
                    # y 개수때 종료하고자 숫자 카운트
                    count += 1
                    
                    # y번째 라면
                    if count == y :
                        # 종료 및 현재의 숫자를 출력
                        return j
            
# 호출
print(Eratosthenes(int1, int2))

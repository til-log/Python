# 최대공약수와 최소공배수

# 2609번
# 두 개의 자연수를 입력받아 최대 공약수와 최소 공배수를 출력하는 프로그램을 작성하시오.

# 입력 : 첫째 줄에는 두 개의 자연수가 주어진다. 이 둘은 10,000이하의 자연수이며 사이에 한 칸의 공백이 주어진다.

# 출력 : 첫째 줄에는 입력으로 주어진 두 수의 최대공약수를, 둘째 줄에는 입력으로 주어진 두 수의 최소 공배수를 출력한다.

# 예제 입력1 : 24 18
# 예제 출력1 :
# 6
# 72


# 입력 받기. 우선 input으로 입력값을 받을 때 한 줄에 띄어쓰기로 구분해 입력이 필요하기 때문에 split으로 띄어쓰기로 하여금 분리.
# 입력된 숫자는 빠른 계산을 위해 자연수 int로 설정. map과 list를 사용해 2개의 입력값으로 분리시킨다.
int1, int2 = list(map(int, input().split(' ')))

# 최대 공약수 유클리드 호제법 사용(소인수분해가 아닌 빠르고 직관적인 절차로 찾을 수 있음)
# 최대공약수(GCD)는 유클리드 호제법으로 계산 (소인수분해보다 빠르고 직관적)
# 첫 번째 계산: int1 = int2 * q(몫) + r(나머지)
# 이때 gcd(int1, int2) = gcd(int2, r)이므로, 공약수의 집합이 같음을 이용한다.

# gcd(int1, int2) = gcd(int2, 아까 구한 값의 나머지)
def greatest_common(x,y):        
    # int1이 크건 int2가 크건 계산은 동일하므로 별도의 스왑 처리는 진행하지 않음

    # 서로가 같은 경우일 때 최대 공약수는 해당 값이기 때문에 해당 값 리턴
    if x == y :
        return x

    # 반복문으로 y가 0이 될 때까지 반복
    while y != 0:
        # y(나머지)가 0이 될 때까지 (x, y)를 (y, x % y)로 갱신하며 반복
        # 나누는 수와 나머지를 반복적으로 교체하며 최대 공약수 찾기
        x,y = y, x%y
    
    # 나머지가 0이 된 시점의 x(나누는 값) 나누는 값 x가 최대공약수
    return x

def least_common(x,y):
    # 최대공약수 값을 활용하여 최소 공배수 확인
    return x*y // greatest_common(x, y)

# 함수 실행 출력
print(greatest_common(int1, int2), least_common(int1, int2), sep='\n')

# 최대공약수와 최소공배수

# 2609번
# 두 개의 자연수를 입력받아 최대 공약수와 최소 공배수를 출력하는 프로그램을 작성하시오.

# 입력 : 첫째 줄에는 두 개의 자연수가 주어진다. 이 둘은 10,000이하의 자연수이며 사이에 한 칸의 공백이 주어진다.

# 출력 : 첫째 줄에는 입력으로 주어진 두 수의 최대공약수를, 둘째 줄에는 입력으로 주어진 두 수의 최소 공배수를 출력한다.

# 예제 입력1 : 24 18
# 예제 출력1 :
# 6
# 72


# 입력 받기. 우선 input으로 입력값을 받을 때 한 줄에 띄어쓰기로 구분해 입력이 필요하기 때문에 split으로 띄어쓰기로 하여금 두 숫자가 다른 자연수임을 명시.
# 입력된 숫자는 빠른 계산을 위해 자연수로 설정. map과 list를 사용해 2개의 입력값으로 분리시킨다.
int1, int2 = list(map(int, input().split(' ')))

# 최대 공약수 유클리드 호제법 사용(소인수분해가 아닌 빠르고 직관적인 절차로 찾을 수 있음)
# 예시로 int1이 2보다 크다고 할 때의 기준으로 첫 나눗셈 계산 int1 = int2 * q(몫) + r(나머지)
# int1과 int2의 공약수 = int2와 r(나머지)의 공약수
# 동일하게 취급하여 공약수 집합이 같다고 볼 수 있음

# gcd(int1, int2) = gcd(int2, 아까 구한 값의 나머지)
def greatest_common(x,y):
    if x < y :
        # 유클리드 호제법은 큰 수에서 나눠가야 하기 때문에 만약 먼저 받은 값이 큰 수가 아닐 경우 대비
        # y와 x의 위치를 변경해야 함
        temp = x
        x = y
        y = temp
        # 값 서로 위치 변경 완료
    elif x == y :
        return x
        # 서로가 같은 경우일 때 서로소는 해당 값이기 때문에 해당 값 리턴
    else :
        pass

# 최대공약수 함수 입력값 2개. 정수로 받은 값으로 계산되기 떄문에 별도의 int 명시는 진행하지 않음
    while y != 0:
    # 반복문으로 y가 0이 아니면 무한 실행되게 할 예정
    # 소인수분해가 아닌 직접적으로 빠르고 간단한 절차를 위해 유클리드 호제법을 사용하여 최대공약수 활용할 것.
        x,y = y, x%y
        # x를 y로 바꿔가고 y를 나머지로 바꿔감, 중요한 것은 나누는 값과 나머지이기에 해당 값으로 무한으로 넣다가
        # 최종 y가 0이 된다면 나눌 수 없기에 종료
    return x

def least_common(x,y):
    # 최대공약수 값을 활용하여 최소 공배수 확인
    return x*y // greatest_common(x, y)

# 함수 실행 출력
print(greatest_common(int1, int2), least_common(int1, int2), sep='\n')
